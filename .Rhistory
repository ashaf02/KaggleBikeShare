##Libraries
library(tidyverse)
library(tidymodels)
library(vroom)
library(recipes)
library(dplyr)
##Read in the Data
bike <- vroom("train.csv")
##Feature Engineering
bike_recipe <- recipe(count ~ ., data = bike_clean) %>%
# Convert 'season', 'holiday', 'workingday', and 'weather' to dummy variables
step_dummy(season, holiday, workingday, weather)
# Extract the hour of the day and create a new 'hour_of_day' feature
bike_features <- bike_clean %>%
mutate(hour_of_day = hour(datetime)) %>%
select(-datetime)  # Remove the original 'datetime' column
print(bike_features, n=10, width=Inf)
setwd("C:/Users/amand/OneDrive/Desktop/Fall 2023/STAT348/KaggleBikeShare")
##Read in the Data
bike <- vroom("train.csv")
##Cleaning
bike_clean <- bike %>%
# Remove weather level 4 - only one record - will not be valuable
filter(weather != 4)
##Feature Engineering
bike_recipe <- recipe(count ~ ., data = bike_clean) %>%
# Convert 'season', 'holiday', 'workingday', and 'weather' to dummy variables
step_dummy(season, holiday, workingday, weather)
# Extract the hour of the day and create a new 'hour_of_day' feature
bike_features <- bike_clean %>%
mutate(hour_of_day = hour(datetime)) %>%
select(-datetime)  # Remove the original 'datetime' column
print(bike_features, n=10, width=Inf)
##Cleaning
bike_clean <- bike %>%
# Remove weather level 4 to 3 (similar conditions)
mutate(weather = ifelse(weather ==4, 3, weather))
##Feature Engineering
bike_recipe <- recipe(count ~ ., data = bike_clean) %>%
# Convert 'season', 'holiday', 'workingday', and 'weather' to dummy variables
step_dummy(season, holiday, workingday, weather)
# Extract the hour of the day and create a new 'hour_of_day' feature
bike_features <- bike_clean %>%
mutate(hour_of_day = hour(datetime)) %>%
select(-datetime)  # Remove the original 'datetime' column
print(bike_features, n=10, width=Inf)
##Linear Regression
my_mod <- linear_reg() %>%
set_enngine("lm")
##Linear Regression
my_mod <- linear_reg() %>%
set_engine("lm")
bike_workflow <- workflow() %>%
add_recipt(bike_features) %>%
add_model(my_mod) %>%
fit(data = myDataSet)
bike_workflow <- workflow() %>%
add_recipe(bike_features) %>%
add_model(my_mod) %>%
fit(data = myDataSet)
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(my_mod) %>%
fit(data = myDataSet)
test <- vroom("test.csv")
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(my_mod) %>%
fit(data = test)
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(my_mod) %>%
fit(data = bike)
##Feature Engineering
bike_recipe <- recipe(count ~ ., data = bike_clean) %>%
# Convert 'season', 'holiday', 'workingday', and 'weather' to dummy variables
step_dummy(season, holiday, workingday, weather)
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(my_mod) %>%
fit(data = bike)
##Feature Engineering
bike_recipe <- recipe(count ~ ., data = bike_clean) %>%
# Convert 'season', 'holiday', 'workingday', and 'weather' to factors
step_mutate(
season = factor(season, levels = c(1, 2, 3, 4), labels = c("spring", "summer", "fall", "winter")),
holiday = factor(holiday, levels = c(0, 1), labels = c("no", "yes")),
workingday = factor(workingday, levels = c(0, 1), labels = c("no", "yes")),
weather = factor(weather, levels = c(1, 2, 3, 4), labels = c("Clear", "Mist", "Light Rain", "Heavy Rain"))
) %>%
# Create a time of day variable from 'datetime'
step_time(datetime, features = c("hour", "minute")) %>%
# Convert numeric variables to factors
step_num2factor(casual, registered) %>%
# Create a new variable 'temp_squared' as the square of 'temp'
step_mutate(temp_squared = temp^2) %>%
# Remove the original 'datetime' variable
step_rm(datetime)
##Feature Engineering
bike_recipe <- recipe(count ~ ., data = bike_clean) %>%
# Convert 'season', 'holiday', 'workingday', and 'weather' to factors
step_mutate(
season = factor(season, levels = c(1, 2, 3, 4), labels = c("spring", "summer", "fall", "winter")),
holiday = factor(holiday, levels = c(0, 1), labels = c("no", "yes")),
workingday = factor(workingday, levels = c(0, 1), labels = c("no", "yes")),
weather = factor(weather, levels = c(1, 2, 3, 4), labels = c("Clear", "Mist", "Light Rain", "Heavy Rain"))
) %>%
# Create a time of day variable from 'datetime'
step_time(datetime, features = c("hour", "minute")) %>%
# Convert numeric variables 'casual' and 'registered' into factors with custom levels
step_mutate(
casual = factor(ifelse(casual < median(casual), "low", "high")),
registered = factor(ifelse(registered < median(registered), "low", "high"))
) %>%
# Create a new variable 'temp_squared' as the square of 'temp'
step_mutate(temp_squared = temp^2) %>%
# Remove the original 'datetime' variable
step_rm(datetime)
##Feature Engineering
bike_recipe <- recipe(count ~ ., data = bike_clean) %>%
# Convert 'season', 'holiday', 'workingday', and 'weather' to factors
step_mutate(
season = factor(season, levels = c(1, 2, 3, 4), labels = c("spring", "summer", "fall", "winter")),
holiday = factor(holiday, levels = c(0, 1), labels = c("no", "yes")),
workingday = factor(workingday, levels = c(0, 1), labels = c("no", "yes")),
weather = factor(weather, levels = c(1, 2, 3, 4), labels = c("Clear", "Mist", "Light Rain", "Heavy Rain"))
) %>%
# Convert weather level 4 to level 3
step_mutate(weather = ifelse(weather == "Heavy Rain", "Light Rain", weather)) %>%
# Create a time of day variable from 'datetime'
step_time(datetime, features = c("hour", "minute")) %>%
# Convert numeric variables 'casual' and 'registered' into factors with custom levels
step_mutate(
casual = factor(ifelse(casual < median(casual), "low", "high")),
registered = factor(ifelse(registered < median(registered), "low", "high"))
) %>%
# Create a new variable 'temp_squared' as the square of 'temp'
step_mutate(temp_squared = temp^2) %>%
# Remove the original 'datetime' variable
step_rm(datetime)
##Linear Regression
my_mod <- linear_reg() %>%
set_engine("lm")
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(my_mod) %>%
fit(data = bike)
bike_predictions <- predict(bike_workflow,
new_data=test)
##Feature Engineering
bike_recipe <- recipe(count ~ ., data = bike_clean) %>%
# Convert 'season', 'holiday', 'workingday', and 'weather' to factors
step_mutate(
season = factor(season, levels = c(1, 2, 3, 4), labels = c("spring", "summer", "fall", "winter")),
holiday = factor(holiday, levels = c(0, 1), labels = c("no", "yes")),
workingday = factor(workingday, levels = c(0, 1), labels = c("no", "yes")),
weather = factor(weather, levels = c(1, 2, 3, 4), labels = c("Clear", "Mist", "Light Rain", "Heavy Rain"))
) %>%
# Convert weather level 4 to level 3
step_mutate(weather = ifelse(weather == "Heavy Rain", "Light Rain", weather)) %>%
# Create a time of day variable from 'datetime'
step_time(datetime, features = c("hour", "minute")) %>%
# Create a new variable 'temp_squared' as the square of 'temp'
step_mutate(temp_squared = temp^2) %>%
# Remove the original 'datetime' variable
step_rm(datetime)
##Linear Regression
my_mod <- linear_reg() %>%
set_engine("lm")
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(my_mod) %>%
fit(data = bike)
bike_predictions <- predict(bike_workflow,
new_data=test)
##Cleaning
bike_clean <- bike %>%
# Remove weather level 4 to 3 (similar conditions)
mutate(weather = ifelse(weather == 4, 3, weather))
bike_clean
##Cleaning
bike_clean <- bike %>%
# Remove weather level 4 to 3 (similar conditions)
mutate(weather = ifelse(weather == 4, 3, weather))
##Feature Engineering
bike_recipe <- recipe(count ~ ., data = bike_clean) %>%
# Convert 'season', 'holiday', 'workingday', and 'weather' to factors
step_mutate(
season = factor(season, levels = c(1, 2, 3, 4), labels = c("spring", "summer", "fall", "winter")),
holiday = factor(holiday, levels = c(0, 1), labels = c("no", "yes")),
workingday = factor(workingday, levels = c(0, 1), labels = c("no", "yes")),
weather = factor(weather, levels = c(1, 2, 3, 4), labels = c("Clear", "Mist", "Light Rain", "Heavy Rain"))
) %>%
# Create a time of day variable from 'datetime'
step_time(datetime, features = c("hour", "minute")) %>%
# Create a new variable 'temp_squared' as the square of 'temp'
step_mutate(temp_squared = temp^2) %>%
# Remove the original 'datetime' variable
step_rm(datetime)
##Linear Regression
my_mod <- linear_reg() %>%
set_engine("lm")
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(my_mod) %>%
fit(data = bike)
bike_predictions <- predict(bike_workflow,
new_data=test)
##Cleaning
bike_clean <- bike %>%
# Remove weather level 4 to 3 (similar conditions)
mutate(weather = ifelse(weather == 4, 3, weather))
##Feature Engineering
bike_recipe <- recipe(count ~ ., data = bike_clean) %>%
# Convert 'season', 'holiday', 'workingday', and 'weather' to factors
step_mutate(
season = factor(season, levels = c(1, 2, 3, 4), labels = c("spring", "summer", "fall", "winter")),
holiday = factor(holiday, levels = c(0, 1), labels = c("no", "yes")),
workingday = factor(workingday, levels = c(0, 1), labels = c("no", "yes")),
weather = factor(weather, levels = c(1, 2, 3, 4), labels = c("Clear", "Mist", "Light Rain", "Heavy Rain"))
) %>%
# Create a time of day variable from 'datetime'
step_time(datetime, features = c("hour", "minute")) %>%
# Create a new variable 'temp_squared' as the square of 'temp'
step_mutate(temp_squared = temp^2) %>%
# Remove the original 'datetime' variable
step_rm(datetime)
##Linear Regression
my_mod <- linear_reg() %>%
set_engine("lm")
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(my_mod) %>%
fit(data = bike)
bike_predictions <- predict(bike_workflow,
new_data=test)
bike_clean
##Feature Engineering
bike_recipe <- recipe(count ~ ., data = bike) %>%
# Convert 'season', 'holiday', 'workingday', and 'weather' to factors
step_mutate(
season = factor(season, levels = c(1, 2, 3, 4), labels = c("spring", "summer", "fall", "winter")),
holiday = factor(holiday, levels = c(0, 1), labels = c("no", "yes")),
workingday = factor(workingday, levels = c(0, 1), labels = c("no", "yes")),
weather = factor(weather, levels = c(1, 2, 3, 4), labels = c("Clear", "Mist", "Light Rain", "Heavy Rain"))
) %>%
# Replace 'weather' values of 4 with 3
step_mutate(weather = ifelse(weather == "Heavy Rain", "Light Rain", weather)) %>%
# Create a time of day variable from 'datetime'
step_time(datetime, features = c("hour", "minute")) %>%
# Create a new variable 'temp_squared' as the square of 'temp'
step_mutate(temp_squared = temp^2) %>%
# Remove the original 'datetime' variable
step_rm(datetime)
##Linear Regression
my_mod <- linear_reg() %>%
set_engine("lm")
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(my_mod) %>%
fit(data = bike)
##Feature Engineering
bike_recipe <- recipe(count ~ ., data = bike) %>%
# Convert 'season', 'holiday', 'workingday', and 'weather' to factors
step_mutate(
season = factor(season, levels = c(1, 2, 3, 4), labels = c("spring", "summer", "fall", "winter")),
holiday = factor(holiday, levels = c(0, 1), labels = c("no", "yes")),
workingday = factor(workingday, levels = c(0, 1), labels = c("no", "yes")),
weather = factor(weather, levels = c(1, 2, 3, 4), labels = c("Clear", "Mist", "Light Rain", "Heavy Rain"))
) %>%
# Replace 'weather' values of 4 with 3
step_mutate(weather = ifelse(weather == "Heavy Rain", "Light Rain", weather)) %>%
# Create a time of day variable from 'datetime'
step_time(datetime, features = c("hour", "minute")) %>%
# Create a new variable 'temp_squared' as the square of 'temp'
step_mutate(temp_squared = temp^2) %>%
# Remove the original 'datetime' variable
step_rm(datetime)
##Linear Regression
my_mod <- linear_reg() %>%
set_engine("lm")
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(my_mod) %>%
fit(data = bike)
bike_predictions <- predict(bike_workflow,
new_data=test)
bike_recipe
